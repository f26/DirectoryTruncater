<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /g/+B/8H/gf/g/4H/8P+B//j//////////8=
</value>
  </data>
</root>